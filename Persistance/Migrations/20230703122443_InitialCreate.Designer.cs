// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance.DbContexts;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(GameStoreDbContext))]
    [Migration("20230703122443_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "San Mateo",
                            Country = "United States",
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 793, DateTimeKind.Local).AddTicks(4749),
                            CreatedBy = "System",
                            DeletedBy = "",
                            PostalCode = "94404",
                            State = "California",
                            StreetAddress = "2207 Bridgepointe Pkwy",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 2,
                            City = "Amsterdam",
                            Country = "The Netherlands",
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 793, DateTimeKind.Local).AddTicks(4799),
                            CreatedBy = "System",
                            DeletedBy = "",
                            PostalCode = "1012 RL",
                            State = "",
                            StreetAddress = "Nieuwezijds Voorburgwal 225",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = 3,
                            City = "Bellevue",
                            Country = "United States",
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 793, DateTimeKind.Local).AddTicks(4803),
                            CreatedBy = "System",
                            DeletedBy = "",
                            PostalCode = "98004",
                            State = "Washington",
                            StreetAddress = "500 108th Avenue North East Suite 2600",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Founded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HeadquartersId")
                        .HasColumnType("int");

                    b.Property<string>("LogoImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeadquartersId");

                    b.HasIndex("ParentCompanyId");

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyType = 2,
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 794, DateTimeKind.Local).AddTicks(841),
                            CreatedBy = "System",
                            DeletedBy = "",
                            Founded = new DateTime(2005, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeadquartersId = 1,
                            LogoImageUri = "",
                            Name = "PlayStation Studios",
                            NumberOfEmployees = 4000,
                            TradeName = "PlayStation Studios",
                            UpdatedBy = "",
                            WebsiteUrl = "https://www.playstation.com/en-us/corporate/playstation-studios/"
                        },
                        new
                        {
                            Id = 2,
                            CompanyType = 0,
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 794, DateTimeKind.Local).AddTicks(848),
                            CreatedBy = "System",
                            DeletedBy = "",
                            Founded = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeadquartersId = 2,
                            LogoImageUri = "",
                            Name = "Guerrilla",
                            NumberOfEmployees = 360,
                            ParentCompanyId = 1,
                            TradeName = "Guerrilla Games",
                            UpdatedBy = "",
                            WebsiteUrl = "https://www.guerrilla-games.com/"
                        },
                        new
                        {
                            Id = 3,
                            CompanyType = 0,
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 794, DateTimeKind.Local).AddTicks(854),
                            CreatedBy = "System",
                            DeletedBy = "",
                            Founded = new DateTime(1997, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeadquartersId = 3,
                            LogoImageUri = "",
                            Name = "Sucker Punch",
                            NumberOfEmployees = 160,
                            ParentCompanyId = 1,
                            TradeName = "Sucker Punch Productions",
                            UpdatedBy = "",
                            WebsiteUrl = "https://www.suckerpunch.com/"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("TotalTimePlayed")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoverImageUri = "",
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 794, DateTimeKind.Local).AddTicks(654),
                            CreatedBy = "System",
                            DeletedBy = "",
                            Price = 649m,
                            PurchaseDate = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2022, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Horizon Forbidden West",
                            TotalTimePlayed = new TimeSpan(0, 0, 0, 0, 0),
                            UpdatedBy = "",
                            Url = "https://www.playstation.com/sv-se/games/horizon-forbidden-west/"
                        },
                        new
                        {
                            Id = 2,
                            CoverImageUri = "",
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 794, DateTimeKind.Local).AddTicks(664),
                            CreatedBy = "System",
                            DeletedBy = "",
                            DeveloperId = 2,
                            Price = 739m,
                            PurchaseDate = new DateTime(2023, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2023, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Horizon Call of the Mountain",
                            TotalTimePlayed = new TimeSpan(0, 0, 0, 0, 0),
                            UpdatedBy = "",
                            Url = "https://www.playstation.com/en-se/games/horizon-call-of-the-mountain/"
                        },
                        new
                        {
                            Id = 3,
                            CoverImageUri = "",
                            CreatedAt = new DateTime(2023, 7, 3, 14, 24, 43, 794, DateTimeKind.Local).AddTicks(673),
                            CreatedBy = "System",
                            DeletedBy = "",
                            DeveloperId = 3,
                            Price = 699m,
                            PurchaseDate = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseDate = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ghost of Tsushima",
                            TotalTimePlayed = new TimeSpan(0, 0, 0, 0, 0),
                            UpdatedBy = "",
                            Url = "https://www.playstation.com/en-se/games/ghost-of-tsushima/"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VideoGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoGameId")
                        .IsUnique()
                        .HasFilter("[VideoGameId] IS NOT NULL");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Headquarters")
                        .WithMany()
                        .HasForeignKey("HeadquartersId");

                    b.HasOne("Domain.Entities.Company", "ParentCompany")
                        .WithMany()
                        .HasForeignKey("ParentCompanyId");

                    b.Navigation("Headquarters");

                    b.Navigation("ParentCompany");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Developer")
                        .WithMany("Products")
                        .HasForeignKey("DeveloperId");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Product", "VideoGame")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Entities.Review", "VideoGameId");

                    b.Navigation("VideoGame");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Review");
                });
#pragma warning restore 612, 618
        }
    }
}
